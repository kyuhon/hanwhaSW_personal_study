08.12 다형성

루트를 했을 때 반복횟수가 줄어든다
동적 바인딩에서 실제 객체인 자식 메소드가 실행된다 - > 유지보수 때문에
	런타임시점과 컴파일 시점에 다르다는걸 알고 있어야한다
		컴파일 시점에는 정적 바인딩만 지원되지만 런타임 시점에는 오버라이딩 된 자식 객체의 메소드가 동작(동적 바인딩)
캡슐화 - 타입은닉화 유지보수 때문에


은닉화 기술
1. 필드 및 메소드 은닉(캡슐화)
2. 타입 은닉(다형성)
3. 구현 은닉 -> 인터페이스를 배우고 설명
	인터페이스를 배울 때 -> solid원칙에 대해서 설명

hashcode 
	==까지는 아니지만 같은 범주의 값을 찾은 후에 값을 빠르게 비교하는 기능
hashCode() 로 같은 int값이 나오며 equals()가 true이면 동등한 것으로 판단


확인사항
09:05 정적 바인딩 메소드, 동적 바인딩, 유지보수 기술
09:27 컴파일 시점에 에러가 안나는 부분
		((Tiger)animals[0]).bite(); 런타임 시점에 에러 발생
09:40 업캐스팅, 다운캐스팅 할 떄 기본자료형, 참조자료형이 다르다??
10:30 ~ 10:35 정적 바인딩과 동적 바인딩 추가설명, 추상클래스의 은닉화 
10:44 추상클래스와 인터페이스
	ex) list -> -> -> arrayList
	라이브러리가 만들어지는 설명 *********************
11:22 클래스 사이의 공통 타입의 인터페이스를 만들어 주는 것 -> 마크 인터페이스 
12:16 동등 비교, 동일 비교
12:27 객체가 가진 값을 기준으로...
12:30 hashcode자체는 임의로 오버라이딩 하면 안된다
	모듈러스 연산자, hashcode
14:10 constant pool인 공간과 아닌공간

업캐스팅을 작성했을 때 결합도가 낮아진다
