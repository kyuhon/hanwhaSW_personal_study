09.01 JDBC이어서, DDD설계

Service 계층은 Connection 객체 생성 및 소멸(하나의 트랜잭션 단위) 및 비즈니스 로직, 트랜잭션 처리(commit/rollback)를 담당
dao(data access object)
ddd설계
soft delete
브레인스토밍 - 뇌에 폭풍을 일으킨다, 폭풍이 몰아치듯 거침없는 아이디어와 발상을 자유롭게 나누는 과정
aggregate - 관련된 객체들을 모아 하나의 단위로 취급하는 개념
cqrs패턴, cqrsStorm - 데이터 저장소로부터의 읽기와 업데이트 작업을 분리하는 패턴
칸반(kanban) - 업무를 시각화하고, 진행 중인 작업을 제한하며, 워크플로를 개선하는 린(Lean) 방식이자 프로젝트 관리 방법론
jpa는 복잡한 쿼리에 약하지만 mybatis는 복잡한 쿼리에 강하다
url
서블릿 객체는 싱글톤


확인사항
09:07 properties
09:19 하나의 트랜재션 처리, 하나의 상황에 여러개의 표현
09:21 비즈니스로직은 ~가 아니라 하나의 트랜잭션 처리
09:42 Application1을 위한 클래스파일들
10:27 soft delete, hard delete
10:35 DDD설계
10:42 DDD설계에서 서브도메인에 대한 설명
11:17 전략적 설계, 전술적 설계
11:26 jpa의 단점을 가져간다?
11:29 bounded context되어있음 - 우리팀 언어의 맥락을 안전하게 경계를 만들어 둔 사고의 틀
11:39 프로젝트 주제 
	ERP, SCM, WMS, LMS 이쪽 분야는 안 건드는걸로..
	사용자가 상품을 주문하거나 취소할 때 재고관리까지 관리되는 트랜잭션
	cross platform

12:10 CQRS
	DB Centric
		애플리케이션의 중심에 데이터베이스를 두고, 애플리케이션의 주요 기능과 데이터 관리를
		데이터베이스에 의존하는 소프트웨어 아키텍처 또는 개발 방식을 의미
	도메인이 바뀌지 않는 선에서 application, domain, infrastructure(공공기반시설) 서로간에 격리되어있다
12:18 하나의 어플리케이션에 하나의 db(monolith, 모놀리식), Member같은 Domain 1개, 자바서버1개와 db서버 한개

	자바서버 2개와 db서버 1개, 자바 서버한개를 scaleout - 트래픽의 쿼리를 감당하기 좋게 하기위해서, 조회가 많기 때문에 사용
			scaleout - 서버를 여러 대 추가하여 시스템을 확장
		Redis ***
	
	쿼리와 커맨드가 다른 db를 사용해야 하는 경우, 자바 서버 1개와 db서버 2개, kafka sync(db의 싱크를 맞춰주는 기술??)

	polyglot구조, 자바서버 2개와 db서버 2개
	
12:40 서버와 클라이언트간의 관계, 2티어 아키텍쳐
14:18 se, ee, 아파치
14:33 war(Web Application aRchive) 파일
	웹 애플리케이션을 패키징하기 위한 파일 포맷
14:35 war파일 흐름
14:36 url이란 , uri안에 url과 urn
14:41 csr(클라이언트 사이드 렌더링) - vue, react,suelte,angula
		사용자의 브라우저(클라이언트)에서 JavaScript를 이용해 동적으로 페이지를 렌더링하는 방식
		사용자 인터랙션이 많은 웹 애플리케이션에 적합
	ssr(서버 사이드 랜더링) - jsp, thymeleaf
		서버에서 HTML을 미리 랜더링하여 클라이언트에 전송하는 방식
		초기 로딩 속도가 빠르고 검색 엔진 최적화(SEO)에 유리하며, 서버 부하가 적다는 장점
14:43 문자열을 동적으로
14:45 자바를 건드리고 리스타트 서버를 해야하는 이유
15:20 vm_option
15:25 was(Wbe Application Server)
	HTTP를 통해 컴퓨터나 장치에 애플리케이션을 수행해주는 미들웨어(소프트웨어 엔진)
15:36 annotation의 단점


오늘 학습 정리

