10.20 js마무리 후 view

props
lifecycle - 어떤 시점에 통신을 할건가 mount 기준
router 

백 구현이 미흡하면 json서버를 사용한다??

template 영역??


확인사항
9:10 Promise 객체에 대한 설명
	고차함수 Promise객체를 만들어 콜백함수를 화살표함수를 이용하여 Promise객체에 넘겨주고
	에러가 발생하면 reject를 반환하고 성공하면 resolve를 반환한다
	콜백지옥이 모지??
		콜백 지옥은 JavaScript를 이용한 비동기 프로그래밍시 발생하는 문제로서, 함수의 매개 변수로 넘겨지는 콜백 함수가 		반복되어 코드의 들여쓰기 수준이 감당하기 힘들 정도로 깊어지는 현상을 말한다.

       async function run() {
               let result = await increase(0);
		console.log(result);

             return -1;
        }

         console.log(run());

         run().then(result => console.log('async의 결과인 promise에 담긴 값:', result))

	
10:10 비동기 함수를 동기화
		콜백지옥
		then (catch, finally)
		async func ( ~,~)

10:30 XMLHttpRequest			****************** 프로젝트 시 상기하기
	관리자모드에서 XHR칸을 보면서 백에서 효율적인 통신설계를 구상해야한다

10:33 same origin policy (SOP)
	Cross Origin Resource Sharing(CORS)
		프론트는 프록시에 감싸서 사용하거나 백에서 ~~설정할 수 있다.

10:44 js에서의 .text 와 .json
		
11:24 window 전역객체		*************************
	DOM
	BOM 을 쓰던지 모달창을 쓰던지??
	view시작하기 전 마지막 정리

11:35 Vue 2버전
		options api	, ~~ 사용하지 말아라
		
11:50 composable 패턴, pinia, ~~ 추후 어려운 부분

12:03
import { createApp, ref } from 'vue'

12:06
createApp({
  setup() {
    return {
      count: ref(0) -- 모델
    }
  }
}).mount('#app') -- 뷰
		전체가 ModelView

CDN(content delivery network)
지리적으로 분산된 서버 네트워크를 이용해 사용자와 가장 가까운 서버에서 콘텐츠(이미지, 비디오 등)를 제공하여 웹사이트 로딩 속도를 높이고 대역폭 비용을 절감하며 보안을 강화하는 기술

12:29 주석에 대한 설명
const { createApp, ref } = Vue;
        createApp({
            // option()으로 사용하면 vue 2버전
            setup() {
                // 'hello vue!' 원시 값은 주소를 가지지 않지만 ref를 사용해서 wrapping을 해야
                // 감시자가 관리해서 프론트에 실시간 반영되게 한다 
                const message = ref('hello vue!');
                return {
                    message
                }
            }
        }).mount('#app');

12:32 rawHtml

14:14 v-bind:id와 :id 는 같아
	뷰에서 준 재료를 바탕으로 템플릿영역에 속성을 부여하는 방식
	자동 언래핑

14:39 console.log('isTrue의 값:', isTrue.value); 에서  isTrue.value